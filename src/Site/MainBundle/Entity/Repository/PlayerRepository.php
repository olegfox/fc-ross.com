<?php

namespace Site\MainBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Site\MainBundle\Entity\Player;

/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{
//  Поиск
    public function findSearch($text)
    {
        $em = $this->getEntityManager();

        $players = $em->createQuery('
            SELECT p FROM Site\MainBundle\Entity\Player p
            WHERE p.firstname LIKE :text
            OR p.secondname LIKE :text
            OR p.patronymic LIKE :text
            OR p.birthPlace LIKE :text
            OR p.nationality LIKE :text
            OR p.amplua IN (SELECT a.id FROM Site\MainBundle\Entity\Amplua a WHERE a.name LIKE :text)
            OR p.height LIKE :text
            OR p.weight LIKE :text
            OR p.firstCoach LIKE :text
            OR p.progress LIKE :text
            OR p.title LIKE :text
            OR p.previousTeams LIKE :text
            OR p.favoritePlace LIKE :text
            OR p.favoriteDish LIKE :text
            OR p.favoriteBook LIKE :text
            OR p.anySport LIKE :text
            OR p.hobby LIKE :text
            OR p.favoritePhrase LIKE :text
            AND p.status <> :notStatus
        ')
            ->setParameters(array(
                'text' => '%' . $text . '%',
                'notStatus' => Player::STATUS_ARCHIVE
            ))
            ->getResult();

        return $players;
    }

//  Игроки из первой команды
    public function getPlayerFirstTeam()
    {
        $firstTeamId = $this->getEntityManager()->createQuery('
            SELECT t.id FROM Site\MainBundle\Entity\Team t
            ORDER BY t.name ASC
        ')
            ->setMaxResults(1)
            ->setFirstResult(0)
            ->getSingleScalarResult();

        if ($firstTeamId) {
            return $this->getEntityManager()->createQueryBuilder()
                ->select('p')
                ->from('Site\MainBundle\Entity\Player', 'p')
                ->leftJoin('p.teams', 't')
                ->where('t.id = :firstTeamId')
                ->andWhere('p.status <> :notStatus')
                ->setParameters(array(
                    'firstTeamId' => $firstTeamId,
                    'notStatus' => Player::STATUS_ARCHIVE
                ));
        }

        return false;
    }

//  Поиск игроков по названию команды
    public function findOneByTeamWithStatus($teamName, $status){
        return $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('Site\MainBundle\Entity\Player', 'p')
            ->leftJoin('p.teams', 't')
            ->where('t.name LIKE :teamName')
            ->andWhere('p.status = :status')
            ->andWhere('p.status <> :notStatus')
            ->orderBy('p.amplua', 'ASC')
            ->setParameters(array(
                'teamName' => $teamName,
                'status' => $status,
                'notStatus' => Player::STATUS_ARCHIVE
            ))
            ->getQuery()
            ->getResult();
    }
}
